// SMNChai library for Power network, distribution grids, etc.
// This file is part of the openBuildNet framework, developed at EPFL.
// Author: Truong X. Nghiem (xuan.nghiem@epfl.ch)


// POWERNET_subnetwork
// ===================
// Creates a subnetwork consisting of a distribution node and one or more buses.
// At each time step, each bus requests a combination of (P, Q, E, theta) from the distribution node,
// which solves a PF problem and returns the actual values of (P, Q, E, theta) to the buses.
//
// From bus node to distribution node: a bus node should send a vector of numbers of the following form
//     VtoGrid = [P, Q, E, theta, (Plow, Phigh), (Qlow, Qhigh)]
// where the first four are required, and the two limit pairs (in parentheses) are optional.
// If P (or Q) is a valid number then it is considered fixed / requested;
// otherwise it's not fixed (i.e. a variable) and its constraint is given by the corresponding limit pair (now required).
// For example, if P = NaN then (Plow, Phigh) should exist and give the limits on P.
//
// From distribution node to bus node: a vector of [P, Q, E, theta] will be communicated as the result of solving the PF problem.
// If originally any P/Q/E/theta is fixed then this result vector should contain the same value for it.
// It's up to the bus node how to use these values.
//
// Each bus node can have two updates, both with the same sampling time as the distribution node: one receives the requests from the user(s) and sends the aggregated request to the distribution node; the other receives the response from the distribution node and calculates the users' values.
// An alternative is to have only one update, which in its output computation (UPDATE_Y) will receive and aggregate the users' requests and send them to the distribution node, then in its state update (UPDATE_X), after it has received the results from the distribution node, it will calculate the users' values.
//
// r = POWERNET_subnetwork(busdef, timeStep, addNow=true, distName="distribution")
//
// Inputs:
//   busdef is a Vector of bus names; each bus name must be a valid ID, e.g. "1" and "bus1" are valid but "bus 1" is not.
//   timeStep is the time step of the updates (index = 0) of the distribution node and all bus nodes.
//   addNodesNow (optional, default: true) is true if all non-virtual nodes are added automatically (and thus can't be changed later). If this is false, the nodes, which are stored in the returned map, must be added manually.
//   distName (optional) is the name of the distribution node; if omitted, its default name is "distribution".
//
// Output: r is a Map of the following:
//   "dist" : the distribution node.
//   "buses" : a Map of virtual bus nodes, whose keys are the bus names.
//
// The distribution node has ports Vfrom<bus-name> and Vto<bus-name> for each bus, to receive the requests and return the results respectively.
// Each virtual bus node has two virtual ports: VtoGrid and VfromGrid, to send its requests to the distribution node and to receive the results from the distribution node respectively.

def POWERNET_subnetwork(Vector busdef, double timeStep, bool addNow, string distName) {
  // var busdef = tbusdef;  // A bug in Chaiscript that doesn't work with in-place Map objects  
  if (busdef.empty()) { throw("At least one bus must present."); }

  // Maps of bus nodes
  var mBuses = Map();

  // Create distribution node
  var distNode = new_node(distName);
  distNode.add_update(0, timeStep);

  var thisBusName = "";  // Name of the current bus
  
  // Loop through busdef and create bus nodes
  var busSize = busdef.size();
  for (auto busIdx = 0; busIdx < busSize; ++busIdx) {
    if (!busdef[busIdx].is_type("string")) { throw("A bus name must be a string."); }
    
    thisBusName = busdef[busIdx].trim();
    if (thisBusName.empty()) { throw("Bus name #${busIdx} is empty."); }

    if (mBuses.count(thisBusName) > 0) { throw("Bus name ${thisBusName} has already existed. Bus names must be unique."); }

    // Create the virtual bus node
    var thisBusNode = VNode();

    // Create the ports between the bus node and the distribution node and connect them
    var busInName = "VfromGrid";
    var busOutName = "VtoGrid";
    thisBusNode.add_input(busInName);
    thisBusNode.add_output(busOutName);

    var distInName = "Vfrom" + thisBusName;
    var distOutName = "Vto" + thisBusName;
    distNode.add_input(distInName);
    distNode.add_output(distOutName);

    // The inputs from bus are fed directly to the distribution node's computation, which calculates the outputs to the bus
    distNode.input_to_update(0, distInName, true);
    distNode.output_from_update(0, distOutName);

    connect(thisBusNode.port(busOutName), distNode.port(distInName));
    connect(distNode.port(distOutName), thisBusNode.port(busInName));

    // Save the virtual bus node
    mBuses[thisBusName] := thisBusNode;
  }

  // Add distribution node
  if (addNow) {
    add_node(distNode);
  }

  // Return the nodes in a Map
  return ["dist" : distNode, "buses" : mBuses];
}

def POWERNET_subnetwork(Vector busdef, double timeStep, bool addNow) {
  return POWERNET_subnetwork(busdef, timeStep, addNow, "distribution");
}

def POWERNET_subnetwork(Vector busdef, double timeStep) {
  return POWERNET_subnetwork(busdef, timeStep, true, "distribution");
}



// POWERNET_BusNode
// ===================
// A class that represents a (real) bus node.
//
// There are two types of bus nodes: a constant bus node (with 0 user) which always sends a constant vector
// to the grid node; and a generic bus node (with >0 users) which aggregates the requests of the users
// and sends the aggregated request to the grid, then fetches the result and disaggregate it to the users.
//
// An object of this class has similar behavior as a Node object, and can be used in most functions
// that use a Node object.
class POWERNET_BusNode {
  attr m_name;    // name of the node
  attr m_period;  // the time period of this node
  attr m_nUsers;  // number of users (0: const bus)
  attr m_values;  // const values in case of a const bus
  attr m_added;   // if the bus node has already been added (hence can't be changed anymore)
  attr m_vnode;   // the virtual node which this bus node will implement
  attr m_node;    // the actual node's full name, after this bus node has been added
  
  def POWERNET_BusNode(string name, double period, int nUsers, Vector values, VNode vnode): nUsers >= 0 && period > 0.0 {
    this.m_name = name;
    this.m_period = period;
    this.m_nUsers = nUsers;
    this.m_values = values;
    this.m_added = false;
    this.m_vnode = vnode;
    this.m_node = "";
  }

  // Return the name of the bus node
  def get_name() {
    return this.m_name;
  }

  // Add this bus node to the system, after this it can't be changed.
  // Returns the actual Node object.
  // NOTE: a Node object will be created, therefore if there is an active SubSystem, the node will be created inside that subsystem.
  def add_node() {
    if (this.m_added) {
      throw("This bus node has already been added; hence can't be added again.");
    }

    var mybus = new_node(this.m_name);
    if (this.m_nUsers > 0) {
      // Generic bus with users
      mybus.add_update(0, this.m_period);  // from users to grid
      mybus.add_update(1, this.m_period);  // from grid to users
      
      mybus.add_input("VfromGrid");
      mybus.add_output("VtoGrid");
      mybus.output_from_update(0, "VtoGrid");
      mybus.input_to_update(1, "VfromGrid", true);

      for (var i = 1; i <= this.m_nUsers; ++i) {
	var sin = "Vfrom${i}";
	var sout = "Vto${i}";
	mybus.add_input(sin);
	mybus.add_output(sout);
	mybus.input_to_update(0, sin, true);
	mybus.output_from_update(1, sout);
      }
    } else if (this.m_nUsers == 0) {
      // Const bus
      mybus.add_input("VfromGrid");
      mybus.add_output("VtoGrid");
      mybus.add_update(0, this.m_period);
      mybus.output_from_update(0, "VtoGrid");
    } else {
      throw("Internal error in POWERNET_BusNode: m_nUsers is invalid.");
    }
    mybus.need_updateX(false);
    mybus.implement(this.m_vnode);
    add_node(mybus);
    this.m_added = true;
    this.m_node = mybus.get_name();
    return mybus;
  }

  // Set the name of this bus node
  def set_name(string newName): newName.empty() == false {
    if (this.m_added) {
      throw("This bus node has already been added; hence can't be changed.");
    } else {
      m_name = newName;
    }
  }

  // Start the bus node on a remote computer
  // This assumes that the OBN's generic bus program "obn_powernet_bus" is available on the remote system.
  def start_remote_node(string t_computer, string t_prog, string t_tag) {
    if (!this.m_added) {
      throw("A bus node must be added to the workspace before it can be started remotely.");
    }
    var args = "${this.m_node} --workspace ${workspace()} ${this.m_nUsers}";
    if (this.m_nUsers == 0) {
      // If const bus, construct the values and append to args
      args = args + foldl(this.m_values, fun(x,s) {"${s} ${x}"}, "");
    }
    start_remote_node(this.m_node, t_computer, t_prog, args, t_tag);
  }
  def start_remote_node(string t_computer, string t_prog) {
    this.start_remote_node(t_computer, t_prog, "");
  }
  
}


// POWERNET_network_from_csv
// =========================
// This function creates a power network (a grid node and a number of bus nodes connected to it)
// by loading the bus descriptions from a CSV file.
// The CSV file has one row for each bus. Each row consists of the following fields:
//   bus-name, nUsers, P, Q, E, theta
// where
//   bus-name is the bus' name (string), typically the bus number, e.g. 2
//   nUsers is an integer which is the number of users attached to this bus, must be >= 0
//   P,Q,E,theta: if nUsers = 0, this is a constant bus, which always outputs these values at every time step
// If nUsers > 0, the values P, Q, E, theta are not used, so they can be any values.
//
// Inputs:
//   filename is the name of the CSV file.
//   timeStep is the sampling time of all the nodes
//   distName is the name of the grid/distribution node
//   return_map: see below
//
// Returns:
// - If return_map = false (default): a vector of node objects, the first one (index = 0) is the grid node, the rest (index from 1 to the number of rows in the CSV file) are the bus nodes (of type POWERNET_BusNode above).
// - If return_map = true: a Map object with two fields: "dist" is the grid/distribution node, "buses" is a Map object of the bus nodes whose keys are the bus names.
def POWERNET_network_from_csv(string filename, double timeStep, string distName, bool return_map): !filename.empty() && timeStep > 0.0 && !distName.empty() {
  // Load the CSV file
  var busdefs = load_csv_into_chai(filename, "sidddd", ",", false);
  if (!busdefs.is_type("Vector")) {
    throw("Error: the data read from the CSV file is invalid.");
  }

  var nBuses = busdefs.size();
  if (nBuses < 1) {
    throw("Error: there are no bus definitions in the CSV file.");
  }

  // Create distribution node
  var distNode = new_node(distName);
  distNode.add_update(0, timeStep);

  var mBuses;
  if (return_map) {
    mBuses = Map();
  } else {
    mBuses = Vector();
  }

  // Loop through the bus definitions and create the bus nodes
  var thisBusName = "";  // Name of the current bus
  
  // Loop through busdef and create bus nodes
  for (auto busIdx = 1; busIdx <= nBuses; ++busIdx) {
    var curRow := busdefs[busIdx-1];
    if (curRow.size() < 6) {
      throw("Not enough fields in row ${busIdx} of the CSV file.");
    }

    thisBusName = curRow[0].trim();
    if (thisBusName.empty()) { throw("Bus name ${busIdx} is empty."); }

    // Create the virtual bus node and connect it
    var thisBusNode = VNode();

    // Create the ports between the bus node and the distribution node and connect them
    var busInName = "VfromGrid";
    var busOutName = "VtoGrid";
    thisBusNode.add_input(busInName);
    thisBusNode.add_output(busOutName);

    var distInName = "Vfrom" + thisBusName;
    var distOutName = "Vto" + thisBusName;
    distNode.add_input(distInName);
    distNode.add_output(distOutName);

    // The inputs from bus are fed directly to the distribution node's computation, which calculates the outputs to the bus
    distNode.input_to_update(0, distInName, true);
    distNode.output_from_update(0, distOutName);

    connect(thisBusNode.port(busOutName), distNode.port(distInName));
    connect(distNode.port(distOutName), thisBusNode.port(busInName));

    // Create the BusNode object
    var values = Vector();
    if (curRow[1] == 0) {
      // const bus: Copy the values to this vector
      for (var i = 2; i < curRow.size(); ++i) {
	values.push_back(curRow[i]);
      }
    }
    
    var obj = POWERNET_BusNode("bus${thisBusName}", timeStep, curRow[1], values, thisBusNode);
    if (return_map) {
      mBuses[thisBusName] := obj;
    } else {
      mBuses.push_back_ref(obj);
    }
  }
  
  // Return the nodes
  if (return_map) {
    return ["dist" : distNode, "buses" : mBuses];
  } else {
    return concat([distNode], mBuses);
  }
}

// Version with default value of return_map = false
def POWERNET_network_from_csv(string filename, double timeStep, string distName) {
  return POWERNET_network_from_csv(filename, timeStep, distName, false);
}



// POWERNET_network_from_csv_multibus
// ==================================
// This function creates a power network, which consists of a grid node and
// a single multi-bus node (which implements all the buses in the network),
// by loading the bus descriptions from a CSV file.
// The CSV file has one row for each bus. Each row consists of the following fields:
//   bus-name, nUsers, P, Q, E, theta
// where
//   bus-name is the bus' name (string), typically the bus number, e.g. 2
//   nUsers is an integer which is the number of users attached to this bus, must be >= 0
//   P,Q,E,theta: if nUsers = 0, this is a constant bus, which always outputs these values at every time step
// If nUsers > 0, the values P, Q, E, theta are not used, so they can be any values.
//
// Inputs:
//   filename is the name of the CSV file.
//   timeStep is the sampling time of all the nodes
//   distName is the name of the grid/distribution node
//   busName is the name of the multi-bus node
//
// Returns: a vector of three elements: the first is the Grid node, the second is the multi-bus node, and the last is the number of buses.
def POWERNET_network_from_csv_multibus(string filename, double timeStep, string distName, string busName): !filename.empty() && timeStep > 0.0 && !distName.empty() && !busName.empty() {
  // Load the CSV file
  var busdefs = load_csv_into_chai(filename, "sidddd", ",", false);
  if (!busdefs.is_type("Vector")) {
    throw("Error: the data read from the CSV file is invalid.");
  }

  var nBuses = busdefs.size();
  if (nBuses < 1) {
    throw("Error: there are no bus definitions in the CSV file.");
  }

  // Create distribution node
  var distNode = new_node(distName);
  distNode.add_update(0, timeStep);

  // Create multi-bus node
  var busNode = new_node(busName);
  busNode.add_update(0, timeStep);  // From users -> grid
  busNode.add_update(1, timeStep);  // From grid -> users
  busNode.need_updateX(false);

  // Loop through the bus definitions and create the bus nodes
  var thisBusName = "";  // Name of the current bus
  
  // Loop through busdef and create bus nodes
  for (auto busIdx = 1; busIdx <= nBuses; ++busIdx) {
    var curRow := busdefs[busIdx-1];
    if (curRow.size() < 6) {
      throw("Not enough fields in row ${busIdx} of the CSV file.");
    }

    thisBusName = curRow[0].trim();
    if (thisBusName.empty()) { throw("Bus name ${busIdx} is empty."); }

    // Add the grid input and output for this bus on the bus node
    var busInName = "VfG${thisBusName}";
    var busOutName = "VtG${thisBusName}";
    busNode.add_input(busInName);
    busNode.add_output(busOutName);

    busNode.output_from_update(0, busOutName);
    busNode.input_to_update(1, busInName, true);

    // Add the bus input and output for this bus on the grid node
    var distInName = "Vfrom" + thisBusName;
    var distOutName = "Vto" + thisBusName;
    distNode.add_input(distInName);
    distNode.add_output(distOutName);

    // The inputs from bus are fed directly to the distribution node's computation, which calculates the outputs to the bus
    distNode.input_to_update(0, distInName, true);
    distNode.output_from_update(0, distOutName);

    connect(busNode.port(busOutName), distNode.port(distInName));
    connect(distNode.port(distOutName), busNode.port(busInName));

    // Create the user input and output for this bus, if it's non-const, on the bus node
    if (curRow[1] > 0) {
      for (auto userIdx = 1; userIdx <= curRow[1]; ++userIdx) {
	busInName = "VfU${thisBusName}_${userIdx}";
	busOutName = "VtU${thisBusName}_${userIdx}";
	busNode.add_input(busInName);
	busNode.add_output(busOutName);
	busNode.input_to_update(0, busInName, true);
	busNode.output_from_update(1, busOutName);
      }
    }
  }
  
  // Return the nodes
  return [distNode, busNode, nBuses];
}
