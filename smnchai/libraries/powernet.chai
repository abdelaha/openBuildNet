// SMNChai library for Power network, distribution grids, etc.
// This file is part of the openBuildNet framework, developed at EPFL.
// Author: Truong X. Nghiem (xuan.nghiem@epfl.ch)


// POWERNET_subnetwork
// ===================
// Creates a subnetwork consisting of a distribution node and one or more buses.
// At each time step, each bus requests a combination of (P, Q, E, theta) from the distribution node,
// which solves a PF problem and returns the actual values of (P, Q, E, theta) to the buses.
//
// From bus node to distribution node: a bus node should send a vector of numbers of the following form
//     VtoGrid = [P, Q, E, theta, (Plow, Phigh), (Qlow, Qhigh)]
// where the first four are required, and the two limit pairs (in parentheses) are optional.
// If P (or Q) is a valid number then it is considered fixed / requested;
// otherwise it's not fixed (i.e. a variable) and its constraint is given by the corresponding limit pair (now required).
// For example, if P = NaN then (Plow, Phigh) should exist and give the limits on P.
//
// From distribution node to bus node: a vector of [P, Q, E, theta] will be communicated as the result of solving the PF problem.
// If originally any P/Q/E/theta is fixed then this result vector should contain the same value for it.
// It's up to the bus node how to use these values.
//
// Each bus node can have two updates, both with the same sampling time as the distribution node: one receives the requests from the user(s) and sends the aggregated request to the distribution node; the other receives the response from the distribution node and calculates the users' values.
// An alternative is to have only one update, which in its output computation (UPDATE_Y) will receive and aggregate the users' requests and send them to the distribution node, then in its state update (UPDATE_X), after it has received the results from the distribution node, it will calculate the users' values.
//
// r = POWERNET_subnetwork(busdef, timeStep, addNow=true, distName="distribution")
//
// Inputs:
//   busdef is a Vector of bus names; each bus name must be a valid ID, e.g. "1" and "bus1" are valid but "bus 1" is not.
//   timeStep is the time step of the updates (index = 0) of the distribution node and all bus nodes.
//   addNodesNow (optional, default: true) is true if all non-virtual nodes are added automatically (and thus can't be changed later). If this is false, the nodes, which are stored in the returned map, must be added manually.
//   distName (optional) is the name of the distribution node; if omitted, its default name is "distribution".
//
// Output: r is a Map of the following:
//   "dist" : the distribution node.
//   "buses" : a Map of virtual bus nodes, whose keys are the bus names.
//
// The distribution node has ports Vfrom<bus-name> and Vto<bus-name> for each bus, to receive the requests and return the results respectively.
// Each virtual bus node has two virtual ports: VtoGrid and VfromGrid, to send its requests to the distribution node and to receive the results from the distribution node respectively.

def POWERNET_subnetwork(Vector busdef, double timeStep, bool addNow, string distName) {
  // var busdef = tbusdef;  // A bug in Chaiscript that doesn't work with in-place Map objects  
  if (busdef.empty()) { throw("At least one bus must present."); }

  // Maps of bus nodes
  var mBuses = Map();

  // Create distribution node
  var distNode = new_node(distName);
  distNode.add_update(0, timeStep);

  var thisBusName = "";  // Name of the current bus
  
  // Loop through busdef and create bus nodes
  var busSize = busdef.size();
  for (auto busIdx = 0; busIdx < busSize; ++busIdx) {
    if (!busdef[busIdx].is_type("string")) { throw("A bus name must be a string."); }
    
    thisBusName = busdef[busIdx].trim();
    if (thisBusName.empty()) { throw("Bus name #" + to_string(busIdx) + " is empty."); }

    if (mBuses.count(thisBusName) > 0) { throw("Bus name " + thisBusName + " has already existed. Bus names must be unique."); }

    // Create the virtual bus node
    var thisBusNode = VNode();

    // Create the ports between the bus node and the distribution node and connect them
    var busInName = "VfromGrid";
    var busOutName = "VtoGrid";
    thisBusNode.add_input(busInName);
    thisBusNode.add_output(busOutName);

    var distInName = "Vfrom" + thisBusName;
    var distOutName = "Vto" + thisBusName;
    distNode.add_input(distInName);
    distNode.add_output(distOutName);

    // The inputs from bus are fed directly to the distribution node's computation, which calculates the outputs to the bus
    distNode.input_to_update(0, distInName, true);
    distNode.output_from_update(0, distOutName);

    connect(thisBusNode.port(busOutName), distNode.port(distInName));
    connect(distNode.port(distOutName), thisBusNode.port(busInName));

    // Save the virtual bus node
    mBuses[thisBusName] := thisBusNode;
  }

  // Add distribution node
  if (addNow) {
    add_node(distNode);
  }

  // Return the nodes in a Map
  return ["dist" : distNode, "buses" : mBuses];
}

def POWERNET_subnetwork(Vector busdef, double timeStep, bool addNow) {
  return POWERNET_subnetwork(busdef, timeStep, addNow, "distribution");
}

def POWERNET_subnetwork(Vector busdef, double timeStep) {
  return POWERNET_subnetwork(busdef, timeStep, true, "distribution");
}
