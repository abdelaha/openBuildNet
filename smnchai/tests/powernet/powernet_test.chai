// Tests the powernet.chai library for creating power network models.

use("powernet.chai");  // Load the SMNChai library for Power Networks

run_simulation(false);  // Do not run simulation, we only want to test

// Create various buses/users, with different properties
var sub_lausanne = new_subsystem("lausanne");
set_current_subsystem(sub_lausanne);
var power_lausanne = POWERNET_subnetwork(["bus1", "bus2"], 1*second, false);

// Create actual bus nodes

// Bus1 has two users: one building (PQ) and one solar generator.
// The solar user sends PE to the bus but expects PQ from the bus, therefore the bus node has two updates.
// The first update receives PQ from building and PE from solar, aggregates them, and sends them to the distribution node.
// The second update, to be called after the first due to input-output dependency, receives the results from the distribution node, calculates and sends PQ to solar, which will be used in the solar node's state update (that's why the second update is necessary).
var bus1 = node(["name": "bus1",
		 "inputs": ["PQBldg", "PEfromSolar", "VfromGrid"],
		 "outputs": ["PQtoSolar", "VtoGrid"],
		 "blocks": [["sampling": 1*second,
			      "inputs": ["PQBldg", "PEfromSolar"],
			      "outputs": ["VtoGrid"]],
			     ["sampling": 1*second,
			      "inputs": ["VfromGrid"],
			      "outputs": ["PQtoSolar"]]]
		 ]);
bus1.implement(power_lausanne["buses"]["bus1"]);

// This Bus2 doesn't need to provide feedbacks to the user as in the case of Bus1, therefore only one update is needed.
var bus2 = node(["name": "bus2",
		 "inputs": ["PQBldg", "VfromGrid"],
		 "outputs": ["VtoGrid"],
		 "blocks": [["sampling": 1*second,
			      "inputs": ["PQBldg"],
			      "outputs": ["VtoGrid"]]]
		 ]);
bus2.implement(power_lausanne["buses"]["bus2"]);

// Add some user nodes and connect them to buses
var building1 = node(["name": "Bldg1",
		      "outputs": ["PQ"],
		      "blocks": [["sampling": 1*second, "outputs": ["PQ"]]
				  ]
		      ]);

var solar = node(["name": "Solar",
		  "inputs": ["PQ"],
		  "outputs": ["PE"],
		  "blocks": [["sampling": 1*second, "outputs": ["PE"]]]
		  ]);

connect(building1.port("PQ"), bus1.port("PQBldg"));
connect(solar.port("PE"), bus1.port("PEfromSolar"));
connect(bus1.port("PQtoSolar"), solar.port("PQ"));

var building2 = node(["name": "Bldg2",
		      "outputs": ["PQ"],
		      "blocks": [["sampling": 1*second, "outputs": ["PQ"]]
				  ]
		      ]);

connect(building2.port("PQ"), bus2.port("PQBldg"));

// We can modify the nodes created by POWERNET ...
// ... then add them
add_nodes_from_collection(power_lausanne, true);

clear_current_subsystem();

print_system();

// Export nodes to DOT
export2dot(power_lausanne["dist"], "distribution.dot");
export2dot(bus1, "bus1.dot");

// Export entire network
// export2dot("system.dot", true, "ranksep = 1;");

// Export system to GraphML
export2graphml("system.graphml");
