// -*- mode: C++; indent-tabs-mode: nil; -*-
// receiver node in ONS (OBN Node Script), to be run with the OBN scriptable node program

// IMPORTANT:
// A function can't access top-level variables unless they are global variables.
// A function can only access its local variables, its arguments (considered local), and global variables.
// So for all top-level variables that need to be accessed inside callback functions (e.g. ports), use one or both of the following solutions:
// 1. Make a variable global by declaring it as: GLOBAL var = ...; then it can be accessed directly inside any function.
// 2. Define a non-global top-level variable as usual, then bind it to an argument of the function that needs to access it, e.g.
//     var a = 1.0;
//     var output = new_output_double("y");
//     def myfunc(y, my_a) { print(my_a); y.set(my_a); }
//     callback_updatey(0, bind(myfunc,output,a));
//
// Solution (1) is easier to use but less elegant.
// The general syntax for bind in Chaiscript is: bind(func,arg1,arg2,...) where arg* is either an object or _; the latter causes the corresponding argument in func to be an argument in the new function.
// Binding, and passing arguments to functions in general, is done via references; therefore any changes to the arguments made by the function are directly applied to the top-level variables (unless the passed arguments are constants). In other words, everything will work as expected, as if the function has direct access to the top-level variables.

// Create a CSV file to write some inputs into; this tests a simple recorder
GLOBAL recorder = CSVWriter("output.csv");

set_comm_mqtt("tcp://localhost:1883");
set_node_name("receiver");
set_workspace("test4");
// set_timeout(10);	// you can set timeout for the node (in seconds)
create_node();

// The ports
var u1 = new_input_double_strict("u1");
var u2 = new_input_double_vector_strict("u2");
var u3 = new_input_double_strict("u3");

// Define the callback functions
// Here we use the second solution to allow functions to use top-level variables, i.e. function binding
def simple_print_update(string s) {
	print(s);
}

callback_y(0, bind(simple_print_update, "First update"));
callback_y(1, bind(simple_print_update, "Second update"));

def printInputs(u2) {
	print("At ${current_time_s()}");
	if (u2.pending()) {
		print("u2:");
		while (u2.pending()) {
			var u2data = u2.pop().transpose();
			print(u2data);
			recorder.write(u2data);
			recorder.new_row();
		}
		print("");
	}
}

callback_x(0, bind(printInputs, u2));
callback_x(1, bind(printInputs, u2));

def msgrcv_callback(string uname, u) {
	if (u.pending()) {
		print("${uname}: ${u.pop()}");
	}
}

u1.callback_msgrcv(bind(msgrcv_callback, "u1", u1));
u3.callback_msgrcv(bind(msgrcv_callback, "u3", u3));

def my_init() {
	print("At ${current_time_s()} INIT");
}

def my_term() {
	print("At ${current_time_s()} TERMINATED");
}

// Set the callbacks
callback_init(my_init);
callback_term(my_term);

// After the script file ends, if the node was created (by create_node()), the node will be run
